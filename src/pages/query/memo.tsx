import React from "react"
export default function Query() {
  return (
    <>
      <h1>react-query / tanStack-query(react-query 4이상버전)비동기상태관리 라이브러리</h1>
      <p>커스텀 훅 시간과 노력이 필요함</p>
      <dl>
        <dt>대표적인 기능</dt>
        <dd>데이터 가져오기 및 캐싱</dd>
        <dd>동일 요청의 중복 제거</dd>
        <dd>신선한 데이터 유지</dd>
        <dd>무한 스크롤, 페이지네이션 등의 성능 최적화</dd>
        <dd>네트워크 재연결, 요청 실패등의 자동갱신</dd>
      </dl>
      <p>이걸 쉽게 해주는 것 데이터 패칭, 캐싱, 동기화 리액트 커스텀 혹으로 개발가능</p>
      <p>
        비동기 처리를 목적으로 나온 상태관리 라이브러리가 아님, redux-saga 미들웨어를 사용해야함
        별도의 상태나 유틸리티를 만들어야함
        action, reducer, sagas 추가만들어야함
        sagas가 사가를 불러올때 문제점이 있음(dependence에 대한 문제)
        데이터 구분(클라이언트사이드, 서버사이드)이 힘듬
        에러처리 리랜더링시 각 컴포넌트에 대한 핸들링이 필요함
      </p>
      <p>rtk-query: 리덕스 구조를 사용, apollo: 스키마 정의, swr: 리액트쿼리와 거의 유사함(enabled 제공않함)</p>
      <p>
        정리
        훅기반의 비동기 처리 지원, 캐싱지원
        비동기 처리를 위한 유용한 도구 제공(비동기 처리 상태 제공, infinity querys)
        서버데이터가 자주 바뀌는 경우 백그라운드 패칭을 지원함(일정주기, 이벤트 발생)
        (게시판댓글, 좋아요/실어요, 주식목록)

        서버사이드 데이터가 거의 없는 경우 (redux, recoil)
        18버전 이상 suspense

        아쉬운점
        mutation은 한번만 호출하기 위해 wrapper 함수가 필요함
        ui테스트 진행하게 될때 mock api 필요할 수 있음
        항상 서버데이터와 같은 데이터를 바라보는 것이 좋지 않음(1회성 요청에 대한 문제)
      </p>
    </>
  )
}